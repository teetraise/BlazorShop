@page "/products"
@page "/"
@using BlazorShop.Shared.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject Services.IProductService ProductService

<PageTitle>Товары</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3>Управление товарами</h3>
        <button class="btn btn-primary" @onclick="NavigateToAdd">
            <i class="fas fa-plus"></i> Добавить товар
        </button>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Загрузка...</span>
            </div>
        </div>
    }
    else if (products == null || products.Count == 0)
    {
        <div class="alert alert-info">
            <i class="fas fa-info-circle"></i> Товары не найдены. 
            <a href="/add-product" class="alert-link">Добавить первый товар</a>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var product in products)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">@product.Name</h5>
                            <p class="card-text">@product.Description</p>
                            <div class="mb-2">
                                <span class="badge bg-secondary">@product.Category</span>
                            </div>
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <strong class="text-success">@product.Price.ToString("C")</strong>
                                    <br>
                                    <small class="text-muted">В наличии: @product.Quantity</small>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer bg-transparent">
                            <div class="btn-group w-100" role="group">
                                <button class="btn btn-outline-primary btn-sm" 
                                        @onclick="() => NavigateToEdit(product.Id)">
                                    <i class="fas fa-edit"></i> Изменить
                                </button>
                                <button class="btn btn-outline-danger btn-sm" 
                                        @onclick="() => ConfirmDelete(product.Id)">
                                    <i class="fas fa-trash"></i> Удалить
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<Product>? products;
    private string? errorMessage;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            products = await ProductService.GetProductsAsync();
            
            if (products == null)
            {
                errorMessage = "Не удалось загрузить список товаров. Пожалуйста, проверьте соединение с сервером.";
                products = new List<Product>();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при загрузке товаров: {ex.Message}";
            Console.WriteLine($"Исключение при загрузке товаров: {ex.Message}");
            if (ex.InnerException != null)
            {
                Console.WriteLine($"Внутреннее исключение: {ex.InnerException.Message}");
            }
            products = new List<Product>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void NavigateToAdd()
    {
        NavigationManager.NavigateTo("/add-product");
    }

    private void NavigateToEdit(int id)
    {
        NavigationManager.NavigateTo($"/edit-product/{id}");
    }

    private async Task ConfirmDelete(int id)
    {
        try
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Вы уверены, что хотите удалить этот товар?");

            if (confirmed)
            {
                errorMessage = null;
                bool success = await ProductService.DeleteProductAsync(id);

                if (success)
                {
                    await LoadProducts();
                    await JSRuntime.InvokeVoidAsync("alert", "Товар успешно удален!");
                }
                else
                {
                    errorMessage = $"Не удалось удалить товар с ID {id}. Пожалуйста, проверьте соединение с сервером.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при удалении товара: {ex.Message}";
            Console.WriteLine($"Исключение при удалении товара: {ex.Message}");
            if (ex.InnerException != null)
            {
                Console.WriteLine($"Внутреннее исключение: {ex.InnerException.Message}");
            }
        }
    }
}